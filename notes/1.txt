# Import System

I am not really sure how to implement the import system. So here are some 
ideas.

Global table VM can be a table of table ->


+-------------------+------------+------+------------------+
|Glob Table Name -> | __default  | math | os               |
+-------------------+------------+------+------------------+
|Hash Key ->        | 0000       | 0001 | 0002             |
+-------------------+------------+------+------------------+
|                   |            |      |                  |
+-------------------+------------+------+------------------+
|Key                |hello()     |pi()  | read_file(...)   |
+-------------------+------------+------+------------------+
|Value              |return 3.14 |a^b   | (native) fopen...|
+-------------------+------------+------+------------------+


Here default is the main module which is importing 'math' and 'os',
__default should access math or os functions with syntax like this 
(if no custom name is specified) ->

math.pi() or <custom_name>.pi()
os.read_file("a.foo") or <custom_name>.read_file("a.foo")




math nor os should be able to access or mutate anything of the importer.

//file -> my_math.pank 
 _______________ 
│ │             │
│1│fun pi()     │
│2│	return 3.14;│
│3│end          │
│_│_____________│


//file -> a.pank
 ___________________________ 
│ │                         │
│1│import m "my_math.pank"  │
│2│let my_pi = 3.1;         │
│3│let pi = m.pi();         │
│4│                         │
│5│show my_pi; //prints 3.1 │
│6│show pi; //prints 3.14   │
│_│_________________________│


here everything is good. my_math.pank doesn't try to mutate anything from 
__default aka. its importer.

but somehow if any malicious party modifies the my_math.pank file like this

 ___________________ 
│ │                 │
│1│ fun pi()        │
│2│     my_pi = 2;  │
│3│     return 3.14;│
│4│ end             │
│_│_________________│


this should create a error.
