# Import System

I am not really sure how to implement the import system. So here are some 
ideas.

Global table VM can be a table of table ->


+-------------------+------------+------+------------------+
|Glob Table Name -> | __default  | math | os               |
+-------------------+------------+------+------------------+
|Hash Key ->        | 0000       | 0001 | 0002             |
+-------------------+------------+------+------------------+
|                   |            |      |                  |
+-------------------+------------+------+------------------+
|Key                |hello()     |pi()  | read_file(...)   |
+-------------------+------------+------+------------------+
|Value              |return 3.14 |a^b   | (native) fopen...|
+-------------------+------------+------+------------------+


Here default is the main module which is importing 'math' and 'os',
__default should access math or os functions with syntax like this ->

math.pi() or <custom_name>.pi()
os.read_file("a.foo") or <custom_name>.read_file("a.foo")




math nor os should be able to access or mutate anything of the importer.

//file -> my_math.pank 
 _______________ 
│ │             │
│1│fun pi()     │
│2│	return 3.14;│
│3│end          │
│_│_____________│


//file -> a.pank
 ___________________________ 
│ │                         │
│1│import m "my_math.pank"  │
│2│let my_pi = 3.1;         │
│3│let pi = m.pi();         │
│4│                         │
│5│show my_pi; //prints 3.1 │
│6│show pi; //prints 3.14   │
│_│_________________________│


here everything is good. my_math.pank doesn't try to mutate anything from 
__default aka. its importer.

but somehow if any malicious party modifies the my_math.pank file like this

 ___________________ 
│ │                 │
│1│ fun pi()        │
│2│     my_pi = 2;  │
│3│     return 3.14;│
│4│ end             │
│_│_________________│


this should create a error. But theoretically importer can mutate items from 
import. As a result, this is theoretically valid from __default:

 _____________________________ 
│  │                          │
│1 │                          │
│2 │import m "my_math.pank"   │
│3 │                          │
│4 │fun new_pi()              │
│5 │    return 3              │
│6 │end                       │
│7 │                          │
│8 │show m.pi() //prints 3.14 │
│9 │                          │
│10│m.pi = new_pi;            │
│11│                          │
│12│show m.pi() //prints 3    │
│__│__________________________│


-------------------------------------------------------------------------------

I am thinking what if every file was a module struct with its own global table 
which gets pushed into the global pool (global table of table).


Global Pool
 +-__default table
 +-
 +-math table
 |   `-
 |       `-pi() -> return 3.14;
 +-my_math table
 |   `-
 |       `-bad_pi() -> my_pi = 2; return 3.14;
 `-os


when in __default , if we call my_math.bad_pi()

my_math . bad_pi()
^^^^^^^ 

we look for bad_pi() function in `my_math` global table. 

when we are running my_math.
`my_math` becomes temporary __default, and previous __default (importer)
doesn't exist in my_math's prespective, then when try to set my_pi variable
we look for in __default table (which is actually just my_math's temporary
table). This way bad_pi() creates error as the variable 'my_pi'  doesn't exist 
in its global table. 

We can even give each call frame it's own global table, that way it will still be able go up till it's parent global pool to look up variables.

Each file will be a module and have a global poll of it's own, like __default for the main one

But what happens when we pass a variable to a imported function. how will it 
access it. we need to somehow create a link between importer supplied variable 
and import's global table to look for local variable in function scope ???
